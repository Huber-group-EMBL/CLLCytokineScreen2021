unlist()
#Annotate RAS_RAF where where any of KRAS, NRAS or BRAF are mutated
patMeta_cl[,"RAS_RAF"] <- ifelse(patMeta_cl[,"KRAS"]==1,1,
ifelse(patMeta_cl[,"BRAF"]==1,1,
ifelse(patMeta_cl[,"NRAS"]==1, 1, 0)))
patMeta_cl %<>% mutate(Cluster=as.factor(Cluster),
RAS_RAF=as.factor(RAS_RAF))
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(IGHV.status)) %>%
group_by(Cluster, IGHV.status) %>%
count() %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(IGHV.status=="M") %>%
rename(IGHV.mutated=Percentage) %>%
select(Cluster, IGHV.mutated)
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(trisomy12)) %>%
group_by(Cluster, trisomy12) %>%
count() %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(trisomy12=="1") %>%
rename(trisomy12_positive=Percentage) %>%
select(Cluster, trisomy12_positive) %>%
left_join(Coef_Perc_Table, ., by = "Cluster")
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(SF3B1)) %>%
group_by(Cluster, SF3B1) %>%
count() %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(SF3B1=="1") %>%
rename(SF3B1_mut=Percentage) %>%
select(Cluster, SF3B1_mut)%>%
left_join(Coef_Perc_Table, ., by = "Cluster")
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(POT1)) %>%
group_by(Cluster, POT1, .drop=FALSE) %>%
count(.drop=FALSE) %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(POT1=="1") %>%
rename(POT1_mut=Percentage) %>%
select(Cluster, POT1_mut)%>%
left_join(Coef_Perc_Table, ., by = "Cluster")
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(ATM)) %>%
group_by(Cluster, ATM) %>%
count() %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(ATM=="1") %>%
rename(ATM_mut=Percentage) %>%
select(Cluster, ATM_mut)%>%
left_join(Coef_Perc_Table, ., by = "Cluster")
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(TP53)) %>%
group_by(Cluster, TP53) %>%
count() %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(TP53=="1") %>%
rename(TP53_mut=Percentage) %>%
select(Cluster, TP53_mut)%>%
left_join(Coef_Perc_Table, ., by = "Cluster")
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(RAS_RAF)) %>%
group_by(Cluster, RAS_RAF, .drop=FALSE) %>%
count(.drop=FALSE) %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(RAS_RAF=="1") %>%
rename(RAS_RAF_mut=Percentage) %>%
select(Cluster, RAS_RAF_mut)%>%
left_join(Coef_Perc_Table, ., by = "Cluster")
Coef_Perc_Table<-  patMeta_cl %>%
filter(!is.na(gain8q)) %>%
group_by(Cluster, gain8q, .drop=FALSE) %>%
count(.drop = FALSE) %>%
group_by(Cluster) %>%
mutate(freq = n / sum(n)) %>%
mutate(Percentage=round(freq*100),0) %>%
filter(gain8q=="1") %>%
rename(gain8q_positive=Percentage) %>%
select(Cluster, gain8q_positive)%>%
left_join(Coef_Perc_Table, ., by = "Cluster")
# Coef_Perc_Table
plotTab <-
coefTab %>%
dplyr::group_by(feature, cluster) %>%
dplyr::summarise(meanCoef = mean(coef),
sdCoef = sd(coef)) %>%
dplyr::arrange(desc(meanCoef)) %>%
ungroup()
#update labelling
plotTab <- plotTab %>% mutate(feature = ifelse(feature == "IGHV", "IGHV status",
ifelse(feature == "trisomy12", "trisomy 12",
ifelse(feature == "gain8q", "gain(8q)", feature))))
plotTab$feature <- factor(plotTab$feature,
levels=c("IGHV status",
"trisomy 12",
"SF3B1",
"POT1",
"ATM",
"TP53",
"RAS/RAF",
"gain(8q)"))
plotTab_for_Perc<- plotTab %>%
mutate(feature=case_when(feature=="IGHV status"~"IGHV.mutated",
feature=="trisomy 12"~"trisomy12_positive",
feature=="POT1"~"POT1_mut",
feature=="SF3B1"~"SF3B1_mut",
feature=="gain(8q)"~"gain8q_positive",
feature=="RAS/RAF"~"RAS_RAF_mut",
feature=="TP53"~"TP53_mut",
feature=="ATM"~"ATM_mut"))
Fig2D<-Coef_Perc_Table %>%
pivot_longer(IGHV.mutated:gain8q_positive, names_to = "feature", values_to = "Percentage" ) %>%
left_join(plotTab_for_Perc, by=c("Cluster"="cluster", "feature")) %>%
mutate(meanCoef=if_else(is.na(meanCoef), 0, meanCoef)) %>%
mutate(Cluster=factor(Cluster, levels = rev(c(1,2,3,4))),
feature= factor(feature,
levels=c("IGHV.mutated","trisomy12_positive","POT1_mut","SF3B1_mut", "gain8q_positive","RAS_RAF_mut","TP53_mut","ATM_mut"),
labels=c("IGHV mutated","trisomy 12","POT1","SF3B1","gain8q","KRAS, BRAF or NRAS","TP53","ATM" ))) %>%
ggplot(aes(y=Cluster, x=feature))+
geom_tile(aes(fill=meanCoef),color = "grey")+
scale_fill_gradient2(low ="#003DA5",  mid ="white",  high = "#A6093D", midpoint = 0)+
geom_text(aes( label=paste0(Percentage, "%")), size=7 )+
t1+
t.leg+
theme(legend.position = "bottom",
legend.key.width = unit(1.7, "cm"),
axis.text.x= element_text(size=fontsize+4, angle=45, vjust=1))+
labs(fill="Coefficient", x="Genetic alteration")
Fig2D
cytSeq <- dds_smp
#Filter out IGHV genes
cytSeq <- cytSeq[!grepl("IG_", rowData(cytSeq)$biotype),]
#split into 3,4
cytSeq.34 <- cytSeq[,colData(cytSeq)[,"Cluster"] %in% c(3,4)]
#remove patients where IGHV is unknown
cytSeq.34 <- cytSeq.34[,colData(cytSeq.34)[,"IGHV.status"] %in% c("U","M")]
#set order of factors
cytSeq.34$Cluster <- factor(cytSeq.34$Cluster,
levels = c("3","4"))
cytSeq.34$IGHV.status <- factor(cytSeq.34$IGHV.status,
levels = c("U","M"))
design(cytSeq.34) <- ~ IGHV.status + Cluster
cytSeq.34 <- DESeq(cytSeq.34)
res.ds <-
results(cytSeq.34, contrast = c("Cluster", 3, 4), tidy = TRUE) %>%
dplyr::rename(Symbol = "row") %>%
dplyr::arrange(pvalue)
#get ensembl ids to Entrez dataframe
ens2entrez <-
rowData(cytSeq.34)[c("entrezgene", "symbol")] %>%
as.data.frame() %>%
rownames_to_column("ENSEMBL") %>%
tibble::as_tibble()
#Join
res.ds <- left_join(res.ds, ens2entrez, by=c("Symbol"="ENSEMBL"))
d <-
dplyr::select(res.ds, entrezgene, stat) %>%
na.omit() %>%
dplyr::group_by(entrezgene) %>%
dplyr::summarize(stat=mean(stat))
## feature 1: numeric vector
geneList <- d$stat
## feature 2: named vector
names(geneList) <- as.character(d$entrezgene)
## feature 3: decreasing order
geneList <- sort(geneList, decreasing = TRUE)
hm2gene <-
msigdbr(species = "Homo sapiens", category = "H") %>%
dplyr::select(gs_name, entrez_gene)
head(hm2gene)
#tidy up terms
hm2gene$gs_name <- gsub("HALLMARK_", "",hm2gene$gs_name)
hm2gene$gs_name <- gsub("_", " ",hm2gene$gs_name)
hm2gene$gs_name <-gsub("MTORC1 SIGNALING"	,"MTORC1 Signaling",hm2gene$gs_name)
hm2gene$gs_name <-gsub("MYC TARGETS V1",	"MYC Targets V1"	,hm2gene$gs_name)
hm2gene$gs_name <-gsub("OXIDATIVE PHOSPHORYLATION",	"Oxidative Phosphorylation",hm2gene$gs_name)
hm2gene$gs_name <-gsub("TNFA SIGNALING VIA NFKB",	"TNFa Signaling via NFKB"	,hm2gene$gs_name)
hm2gene$gs_name <-gsub("UNFOLDED PROTEIN RESPONSE",	"Unfolded Protein Response"	,hm2gene$gs_name)
hm2gene$gs_name <-gsub("UV RESPONSE UP",	"UV Response Up",hm2gene$gs_name)
hm2gene$gs_name <-gsub("INTERFERON GAMMA RESPONSE",	"Interferon Gamma Response"	,hm2gene$gs_name)
hm2gene$gs_name <-gsub("G2M CHECKPOINT",	"G2M Checkpoint",hm2gene$gs_name)
hm2gene$gs_name <-gsub("E2F TARGETS", "E2F Targets"	,hm2gene$gs_name)
hm2gene$gs_name <-gsub("P53 PATHWAY",	"P53 Pathway",hm2gene$gs_name)
#run GSEA
set.seed(1996)
gsea.res <- GSEA(geneList, TERM2GENE = hm2gene, by = "fgsea", seed = TRUE)
#make readable with gene names
gsea.res <- setReadable(gsea.res, org.Hs.eg.db, keyType = "ENTREZID")
#get dataframe of results
gsea.df <- fortify(gsea.res,
showCategory = 10, #how many levels to show
split=NULL)
#order by NES
gsea.df <- dplyr::mutate(gsea.df, "NES" = eval(parse(text="NES")))
idx <- order(gsea.df[["NES"]], decreasing = TRUE)
gsea.df$Description <- factor(gsea.df$Description, levels=rev(unique(gsea.df$Description[idx])))
gsea.df$pos <- 0
Fig2E <-
ggplot(gsea.df,
aes_string(x="NES",
y="Description",
fill="p.adjust")) +
geom_bar(stat = "identity") +
scale_fill_continuous(low=palreds[7],
high=palreds[2],
name = "Adjusted p value",
guide=guide_colorbar(reverse=TRUE)) +
ylab("Hallmark Pathway\n\n") +
xlab("Normalised Enrichment Score") +
ggtitle("Upregulation of gene sets in C3 versus C4") +
t2 +
scale_size(range=c(3, 8)) +
geom_text(aes(label=Description, x = pos), nudge_x = 0.1, hjust = 0,  size = 6, color = "white") +
theme(legend.position=c(0.9, 0.2),
legend.background = element_blank(),
legend.box.background = element_rect(size = 0.5),
legend.title = element_text(face='bold',
hjust = 1, size=11),
legend.key = element_blank(),
legend.text = element_text(size=12),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
Fig2E
design1<-"
11
23
45
"
tp<-ggplot2::theme(plot.tag=element_text(size = 30))
Figure2 <-
wrap_elements(arrangeGrob(Fig2A[[4]])) +tp+
wrap_elements(Fig2B) + tp+
Fig2C + tp+
wrap_elements(Fig2D) + tp+
wrap_elements(Fig2E) + tp+
plot_layout(design=design1,
heights = c(1.6, 1.2, 1.2) ,
widths = c(1,1)) +
plot_annotation(tag_levels = "A", title="Figure 2", theme = theme(title=element_text(size = 20)))
Figure2
Fig2D<-Coef_Perc_Table %>%
pivot_longer(IGHV.mutated:gain8q_positive, names_to = "feature", values_to = "Percentage" ) %>%
left_join(plotTab_for_Perc, by=c("Cluster"="cluster", "feature")) %>%
mutate(meanCoef=if_else(is.na(meanCoef), 0, meanCoef)) %>%
mutate(Cluster=factor(Cluster, levels = rev(c(1,2,3,4))),
feature= factor(feature,
levels=c("IGHV.mutated","trisomy12_positive","POT1_mut","SF3B1_mut", "gain8q_positive","RAS_RAF_mut","TP53_mut","ATM_mut"),
labels=c("IGHV mutated","trisomy 12","POT1","SF3B1","gain8q","KRAS, BRAF or NRAS","TP53","ATM" ))) %>%
ggplot(aes(y=Cluster, x=feature))+
geom_tile(aes(fill=meanCoef),color = "grey")+
scale_fill_gradient2(low ="#003DA5",  mid ="white",  high = "#A6093D", midpoint = 0)+
geom_text(aes( label=paste0(Percentage, "%")), size=7 )+
t1+
t.leg+
theme(legend.position = "bottom",
legend.key.width = unit(1.7, "cm"),
axis.text.x= element_text(size=fontsize+4, angle=45, vjust=1))+
labs(fill="Coefficient", x="Genetic alteration")+
guides(fill="none")
Fig2D
save(coefTab, file = "../../data/multinominal_regression_Clusters_Fig2D.RData" )
library(RColorBrewer)
library(readxl)
library(tidyverse)
#indicate filepath of git repository
filepath<-"C:/Users/PeterBruch/smart_trial/vv_combination/"
#Define Function Plate readin
#This funtion read in csv file from the Ensight Platereader and returns a dataframe with the viability values, the barcode and the rows and columns
readPlate<-function(filename,  verbose = FALSE) {
sep <- ","
if (verbose) print(filename)
txt <- readLines(filename)
sp <- lapply(seq(7,22),  function(x){
txtSp <- txt[x]
txtSp <- strsplit(txtSp, split = sep)[[1]]
txtSp <- txtSp[txtSp != ""]  #remove empty lines
stopifnot(length(txtSp) == 25)
as.integer(txtSp[2:25])
})
rowID <- LETTERS[1:16] #row ID for 384 well plate
df <- tibble(Row = rep( rowID[seq_len(16)], each = 24), Row_in_number = rep(seq_len(16), each = 24), Column= rep(seq_len(24), times = 16), Viability = as.numeric(unlist(sp)))
df<-mutate(df, Position=paste0(Row,Column))
#Add Barcode
Barcode<- txt[5]
Barcode<- substr(Barcode, 11, nchar(Barcode))
Barcode<- strsplit(Barcode, split = ",")[[1]]
Barcode<-Barcode[1]
df$Barcode<-Barcode
#Add Date
recording_date<-as.Date(substr(txt[30], 23,32), "%Y-%m-%d")
df$Recording_date<-recording_date
return(df)
}
#Specify raw Directory
RawDirectory<- "C:/Users/PeterBruch/smart_trial/vv_combination/data"
Filelist<- list.files(RawDirectory)
Filelist_full<- list.files(RawDirectory, full.names = TRUE)
plates<- NA
i<-1
for (i in 1:length(Filelist)){
platename<-  paste0(c("plate", seq(1:length(Filelist))[i]), collapse="")
platename_file<-  Filelist_full[i]
Pat<-substr(Filelist[i], 25, 29)
tmp <- readPlate(filename=platename_file)
if(i==1){
plates<-tmp
}
else{
plates<-bind_rows(plates, tmp)
}
}
remove(Filelist, Filelist_full, platename, platename_file, Pat, Sam, plat, tmp, RawDirectory, i)
library(RColorBrewer)
library(readxl)
library(tidyverse)
#indicate filepath of git repository
filepath<-"C:/Users/PeterBruch/smart_trial/vv_combination/"
#Define Function Plate readin
#This funtion read in csv file from the Ensight Platereader and returns a dataframe with the viability values, the barcode and the rows and columns
readPlate<-function(filename,  verbose = FALSE) {
sep <- ","
if (verbose) print(filename)
txt <- readLines(filename)
sp <- lapply(seq(7,22),  function(x){
txtSp <- txt[x]
txtSp <- strsplit(txtSp, split = sep)[[1]]
txtSp <- txtSp[txtSp != ""]  #remove empty lines
stopifnot(length(txtSp) == 25)
as.integer(txtSp[2:25])
})
rowID <- LETTERS[1:16] #row ID for 384 well plate
df <- tibble(Row = rep( rowID[seq_len(16)], each = 24), Row_in_number = rep(seq_len(16), each = 24), Column= rep(seq_len(24), times = 16), Viability = as.numeric(unlist(sp)))
df<-mutate(df, Position=paste0(Row,Column))
#Add Barcode
Barcode<- txt[5]
Barcode<- substr(Barcode, 11, nchar(Barcode))
Barcode<- strsplit(Barcode, split = ",")[[1]]
Barcode<-Barcode[1]
df$Barcode<-Barcode
#Add Date
recording_date<-as.Date(substr(txt[30], 23,32), "%Y-%m-%d")
df$Recording_date<-recording_date
return(df)
}
#Specify raw Directory
RawDirectory<- "C:/Users/PeterBruch/smart_trial/vv_combination/data"
Filelist<- list.files(RawDirectory)
Filelist_full<- list.files(RawDirectory, full.names = TRUE)
plates<- NA
i<-1
for (i in 1:length(Filelist)){
platename<-  paste0(c("plate", seq(1:length(Filelist))[i]), collapse="")
platename_file<-  Filelist_full[i]
Pat<-substr(Filelist[i], 25, 29)
tmp <- readPlate(filename=platename_file)
if(i==1){
plates<-tmp
}
else{
plates<-bind_rows(plates, tmp)
}
}
remove(Filelist, Filelist_full, platename, platename_file, Pat, Sam, plat, tmp, RawDirectory, i)
View(plates)
Layout_file<-paste0(filepath, "/2022-01-31-SMART-VEN-Vidaza-Combi.xlsx")
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Concentration_Vidaza<- gather(Anno, key=Column, value=Concentration_Vidaza, -Row)
Layout_file<-paste0(filepath, "/2022-01-31-SMART-VEN-Vidaza-Combi.xlsx")
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Concentration_Vidaza<- gather(Anno, key=Column, value=Concentration_Vidaza, -Row)
read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Layout_file<-paste0(filepath, "/2022-01-31-SMART-VEN-Vidaza-Combi.xlsx")
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Concentration_Vidaza<- gather(Anno, key=Column, value=Concentration_Vidaza, -Row)
Anno<-read_excel(path=Layout_file, sheet="Layout_conc", range="B21:Z37")
Layout_file<-paste0(filepath, "/2022-01-31-SMART-VEN-Vidaza-Combi.xlsx")
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Concentration_Vidaza<- gather(Anno, key=Column, value=Concentration_Vidaza, -Row)
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B21:Z37")
Concentration_Venetoclax<- gather(Anno, key=Column, value=Concentration_Venetoclax, -Row)
Anno_long<-left_join(Concentration_Vidaza,Concentration_Venetoclax, by=c("Row", "Column"))%>%
mutate(Column=as.numeric(Column))
df<-left_join(plates, Anno_long, by=c("Row", "Column"))
df
#Define Function NormalizeDMSO
#This Function Normalizes all the Viability Values to the untreated Controls, excluding the Controls in the 2 outermost rows and columns
NormalizetoDMSO <- function(input){
barcodes<-unique(input$Barcode)
input$Normalized<-NA
for(i in 1:length(barcodes)){
tmpDMSOMedian<- median(unlist(select(filter(input, Barcode==barcodes[i], Concentration_Vidaza=="0", Concentration_Venetoclax=="0"), Viability)))
input[input$Barcode==barcodes[i], "DMSOMean"]<-tmpDMSOMedian
}
input<-mutate(input, Normalized = Viability/DMSOMean)
input$DMSOMean<-NULL
return(input)
}
df<-df%>%
NormalizetoDMSO()
save(df, file=paste(filepath, "/22_02_09_Vidaza_Ven_SMART_Kombi.RData", sep=''))
library(RColorBrewer)
library(readxl)
library(tidyverse)
#indicate filepath of git repository
filepath<-"C:/Users/PeterBruch/smart_trial/vv_combination/"
#Define Function Plate readin
#This funtion read in csv file from the Ensight Platereader and returns a dataframe with the viability values, the barcode and the rows and columns
readPlate<-function(filename,  verbose = FALSE) {
sep <- ","
if (verbose) print(filename)
txt <- readLines(filename)
sp <- lapply(seq(7,22),  function(x){
txtSp <- txt[x]
txtSp <- strsplit(txtSp, split = sep)[[1]]
txtSp <- txtSp[txtSp != ""]  #remove empty lines
stopifnot(length(txtSp) == 25)
as.integer(txtSp[2:25])
})
rowID <- LETTERS[1:16] #row ID for 384 well plate
df <- tibble(Row = rep( rowID[seq_len(16)], each = 24), Row_in_number = rep(seq_len(16), each = 24), Column= rep(seq_len(24), times = 16), Viability = as.numeric(unlist(sp)))
df<-mutate(df, Position=paste0(Row,Column))
#Add Barcode
Barcode<- txt[5]
Barcode<- substr(Barcode, 11, nchar(Barcode))
Barcode<- strsplit(Barcode, split = ",")[[1]]
Barcode<-Barcode[1]
df$Barcode<-Barcode
#Add Date
recording_date<-as.Date(substr(txt[30], 23,32), "%Y-%m-%d")
df$Recording_date<-recording_date
return(df)
}
#Specify raw Directory
RawDirectory<- "C:/Users/PeterBruch/smart_trial/vv_combination/data"
Filelist<- list.files(RawDirectory)
Filelist_full<- list.files(RawDirectory, full.names = TRUE)
plates<- NA
i<-1
for (i in 1:length(Filelist)){
platename<-  paste0(c("plate", seq(1:length(Filelist))[i]), collapse="")
platename_file<-  Filelist_full[i]
Pat<-substr(Filelist[i], 25, 29)
tmp <- readPlate(filename=platename_file)
if(i==1){
plates<-tmp
}
else{
plates<-bind_rows(plates, tmp)
}
}
remove(Filelist, Filelist_full, platename, platename_file, Pat, Sam, plat, tmp, RawDirectory, i)
Layout_file<-paste0(filepath, "/2022-01-31-SMART-VEN-Vidaza-Combi.xlsx")
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Concentration_Vidaza<- gather(Anno, key=Column, value=Concentration_Vidaza, -Row)
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B21:Z37")
Concentration_Venetoclax<- gather(Anno, key=Column, value=Concentration_Venetoclax, -Row)
Anno_long<-left_join(Concentration_Vidaza,Concentration_Venetoclax, by=c("Row", "Column"))%>%
mutate(Column=as.numeric(Column))
df<-left_join(plates, Anno_long, by=c("Row", "Column"))
#Define Function NormalizeDMSO
#This Function Normalizes all the Viability Values to the untreated Controls, excluding the Controls in the 2 outermost rows and columns
NormalizetoDMSO <- function(input){
barcodes<-unique(input$Barcode)
input$Normalized<-NA
for(i in 1:length(barcodes)){
tmpDMSOMedian<- median(unlist(select(filter(input, Barcode==barcodes[i], Concentration_Vidaza=="0", Concentration_Venetoclax=="0"), Viability)))
input[input$Barcode==barcodes[i], "DMSOMean"]<-tmpDMSOMedian
}
input<-mutate(input, Normalized = Viability/DMSOMean)
input$DMSOMean<-NULL
return(input)
}
Layout_file<-paste0(filepath, "/2022-01-31-SMART-VEN-Vidaza-Combi.xlsx")
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B2:Z18")
Concentration_Vidaza<- gather(Anno, key=Column, value=Concentration_Vidaza, -Row)
Anno<-read_excel(path=Layout_file, sheet="Layout", range="B21:Z37")
Concentration_Venetoclax<- gather(Anno, key=Column, value=Concentration_Venetoclax, -Row)
Anno_long<-left_join(Concentration_Vidaza,Concentration_Venetoclax, by=c("Row", "Column"))%>%
mutate(Column=as.numeric(Column))
df<-left_join(plates, Anno_long, by=c("Row", "Column"))%>%
filter(!Concentration_Venetoclax=="Empty", !Concentration_Vidaza=="Empty" ) %>%
mutate(Concentration_Venetoclax=as.numeric(Concentration_Venetoclax), Concentration_Vidaza=as.numeric(Concentration_Vidaza))
#Define Function NormalizeDMSO
#This Function Normalizes all the Viability Values to the untreated Controls, excluding the Controls in the 2 outermost rows and columns
NormalizetoDMSO <- function(input){
barcodes<-unique(input$Barcode)
input$Normalized<-NA
for(i in 1:length(barcodes)){
tmpDMSOMedian<- median(unlist(select(filter(input, Barcode==barcodes[i], Concentration_Vidaza=="0", Concentration_Venetoclax=="0"), Viability)))
input[input$Barcode==barcodes[i], "DMSOMean"]<-tmpDMSOMedian
}
input<-mutate(input, Normalized = Viability/DMSOMean)
input$DMSOMean<-NULL
return(input)
}
df<-df%>%
NormalizetoDMSO()
df
