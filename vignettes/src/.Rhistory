}
#select features from patient meta file
geneMatrix <- dplyr::select(patMeta, -c(gender:treatment, Methylation_Cluster)) %>%
#adjust IGHV levels to 1 and 0
mutate(IGHV.status = ifelse(is.na(IGHV.status), NA,
ifelse(IGHV.status == "M", 1, 0))) %>%
#change factors to characters and then to numeric
mutate_if(is.factor, as.character) %>%
mutate_at(vars(-PatientID), as.numeric) %>%
#convert to matrix format
data.frame() %>%
column_to_rownames("PatientID") %>%
as.matrix()
#Remove genes with higher than 20% missing values
geneMatrix <- geneMatrix[,colSums(is.na(geneMatrix))/nrow(geneMatrix) <= 0.2]
#Filter for patients with complete data
geneMatrix.complete <- geneMatrix[complete.cases(geneMatrix),]
nrow(geneMatrix.complete)
#Combine KRAS, NRAS and BRAF mutations into a single column
##Add Ras_raf column
Ras_Raf <- matrix(NA, nrow = nrow(geneMatrix.complete), ncol = 1)
colnames(Ras_Raf) <- "KRAS,\nNRAS,\nBRAF"
geneMatrix.complete <- cbind(geneMatrix.complete, Ras_Raf)
#Add a 1 where any of KRAS, NRAS or BRAF are mutated
geneMatrix.complete[,"KRAS,\nNRAS,\nBRAF"] <- ifelse(geneMatrix.complete[,"KRAS"]==1,1,
ifelse(geneMatrix.complete[,"BRAF"]==1,1,
ifelse(geneMatrix.complete[,"NRAS"]==1, 1, 0)))
#Remove individual KRAS, NRAS and BRAF columns
geneMatrix.complete <- geneMatrix.complete[, !colnames(geneMatrix.complete) %in%  c("KRAS", "NRAS", "BRAF")]
#create a list of drug - cytokine combinations
combos <- expand.grid(thedrugs, thecytokines) %>% mutate(combination = paste(Var1, Var2, sep = ":")) %>% dplyr::select(combination)
#create object to store linear model fit
fit <- vector(mode = 'list', length = length(combos$combination))
names(fit) <- combos$combination
#create an object to store coefficients from fit
coefficients <- vector(mode = 'list', length = length(combos$combination))
names(coefficients) <- combos$combination
#define drugs and cytokines to run the model for
for(x in thedrugs){
for(y in thecytokines){
#get data for given drug and stimulis, and matching pateints to feature matrix
modelTab <- dplyr::filter(df,
PatientID %in% rownames(geneMatrix.complete),
treatment_drug%in% c(x, "DMSO"),
treatment_cytokine %in% c(y, "No Cytokine") )
#define the base level per treatment_type as the "no"-treatment
modelTab$treatment_drug <- as.factor(modelTab$treatment_drug)
modelTab$treatment_cytokine <- as.factor(modelTab$treatment_cytokine)
modelTab$PatientID <- as.factor(modelTab$PatientID)
modelTab$treatment_cytokine %<>% relevel("No Cytokine")
modelTab$treatment_drug %<>% relevel("DMSO")
modelTab$PatientID %<>% relevel("Pat_001")
# fit linear model, with interaction
nam <- paste(x,y, sep = ":")
fit.lm <- lm(Viability ~ treatment_drug * treatment_cytokine * PatientID, modelTab)
fit[[nam]] <- fit.lm
#extract coefficients and p values and put into a dataframe
coeffdf <- summary(fit.lm)$coefficients[,1] %>% as.data.frame()
#process coeffdf
setDT(coeffdf, keep.rownames = TRUE)[]
colnames(coeffdf) <- c("treatment", "beta")
#filter out non-drug:cytokine:patient coefficients
coeffdf <- dplyr::filter(coeffdf,
grepl('treatment_drug.*treatment_cytokine.*PatientID*', treatment))
#remove treatment
coeffdf <- coeffdf %>%
#remove treatment_drug string
mutate_at(vars(treatment), list(~as.character(gsub("treatment_drug", "", .)))) %>%
#remove treatment_cytokine string
mutate_at(vars(treatment), list(~as.character(gsub("treatment_cytokine", "", .)))) %>%
#remove PatientID string
mutate_at(vars(treatment), list(~as.character(gsub("PatientID", "", .))))
#split up into sperate drug, cytokine and patient columns, by colons
coeffdf <- data.frame(coeffdf, do.call(rbind, strsplit(coeffdf$treatment, split = ":", fixed = TRUE)))
#select columns of interest and rename
coeffdf <- coeffdf[, c("beta", "X1", "X2", "X3")]
colnames(coeffdf) <- c("beta","Drug", "Cytokine", "PatientID")
#store in coefficients object
coefficients[[nam]] <- coeffdf
}
}
#bind together all coefficients for all drug:stimulus combinations
coefficients.all <- rbindlist(coefficients)
#make matrix
betaMatrix <-
#add column with drug and stimulus names
dplyr:: mutate(coefficients.all,
drugCytokine = paste0(Drug," + ",Cytokine)) %>%
#remove single treatment columns
dplyr::select(-Cytokine, -Drug) %>%
spread(key = PatientID, value = beta) %>%
data.frame() %>%
remove_rownames() %>%
column_to_rownames("drugCytokine")
#make sure the sample order is the same as the geneMatrix
geneMatrix.complete <- geneMatrix.complete[ rownames(geneMatrix.complete) != "Pat_001",]
betaMatrix <- betaMatrix[,rownames(geneMatrix.complete)]
#check there are no NAs
which(is.na(betaMatrix))
which(betaMatrix == 0)
#define object to hold outputs from runGlm()
dataResult <- list()
#for each drug + stimulus combination:
for (x in rownames(betaMatrix)){
#prepare input and response matrices
y <- unlist(betaMatrix[x,])
X <- geneMatrix.complete
#fit the model and find optimal value of lamba
cvglmfit <- runGlm(X, y, method="lasso", repeats=30, folds=3)
dataResult[[x]] <- cvglmfit
}
#Set up vector to hold coeff values
barValues <- vector(mode="list", length=length(dataResult))
names(barValues) <- names(dataResult)
#Set cut offs
coefCut <- 0.0 #no minimum value of coefficient
freqCut <- 0.9 #coefficient must be selected in 90% of bootstrapped repeats
lassoOut <- dataResult
#for each drug - stimulus combination
for (seaName in names(lassoOut)) {
#get the result from DataResult for given drug:cytokine interaction, extract coefficient matrix and find row means
barValue <- rowMeans(lassoOut[[seaName]]$coefMat)
#check number of occurrences of each coefficient in bootstrapped repeats
freqValue <- rowMeans(abs(sign(lassoOut[[seaName]]$coefMat)))
for(nam in names(barValue)){
#add NA if coefficient value is below thresholds
if(abs(barValue[nam]) < coefCut | freqValue[nam] < freqCut) {
barValue[nam] <- NA }
}
#add set of coefficients to list
barValues[[seaName]] <- barValue
}
#bind coefficients together for all interactions
coeff.mat <- do.call(rbind,barValues)
#remove rows where all values are 0
coeff.mat <- coeff.mat[ rowSums(!is.na(coeff.mat)) > 0,]
#remove columns where all values are 0
coeff.mat <- coeff.mat[ ,colSums(!is.na(coeff.mat)) > 0]
#make any NAs = 0
coeff.mat[is.na(coeff.mat)] <- 0
#cluster coeff.mat
fit <-
coeff.mat %>%
dist() %>%
hclust()
order_comb <- rownames(coeff.mat)[fit$order]
#Put matrix into long format for ggplot
coeff.long.mat <- coeff.mat %>%
as.data.frame() %>%
tibble::rownames_to_column("int") %>%
tidyr::gather(key = "gene", value = "coeff", -int)
#Check number of combinations affected by all genetic alterations
coeff.long.mat %>%
dplyr::filter(coeff!=0) %>%
dplyr::group_by(int) %>%
dplyr::summarize()
coeff.long.mat %>%
dplyr::filter(coeff!=0) %>%
dplyr::group_by(gene) %>%
dplyr::count() %>%
dplyr::arrange(desc(n))
#get top 8 coefficients
order_alt <-
coeff.long.mat %>%
dplyr::filter(coeff!=0) %>%
dplyr::group_by(gene) %>%
dplyr::count(sort=T) %>%
dplyr::select(gene) %>%
unlist() %>%
.[1:8]
#Number of combinations affected by Top 8 genetic alterations
coeff.long.mat %>%
dplyr::filter(coeff!=0, gene%in%order_alt) %>%
dplyr::group_by(int) %>%
dplyr::summarize()
#Plot heatmap
coeff.long.mat.ordered <-
coeff.long.mat %>%
dplyr::filter(gene %in% order_alt, coeff!=0) %>%
dplyr::mutate(gene = factor(gene, levels = order_alt), int = factor(int, levels = rev(order_comb)))  %>%
mutate(direction = ifelse(coeff>0, "Positive", "Negative")) %>%
separate(int, sep=" \\+ ", into=c("Drug", "Stimulus"), remove = FALSE)
Order_Stim <-
coeff.long.mat.ordered %>%
dplyr::filter(coeff!=0) %>%
dplyr::group_by(Stimulus) %>%
dplyr::count(sort=T) %>%
dplyr::select(Stimulus) %>%
unlist()
Order_Drug <-
coeff.long.mat.ordered %>%
dplyr::filter(coeff!=0) %>%
dplyr::group_by(Drug) %>%
dplyr::count(sort=T) %>%
dplyr::select(Drug) %>%
unlist() %>%
rev()
coeff.long.mat.ordered <-
coeff.long.mat.ordered %>%
mutate(Stimulus=factor(Stimulus, levels = Order_Stim),
Drug=factor(Drug, levels = Order_Drug))
cyt_labels = c("TGF-b1"="TGF-\u03B21", "sCD40L+IL-4"="sCD40L + IL4", "IL-1b"="IL1\u03B2", "IL-4"="IL4", "IL-6"="IL6","IL-15"="IL15","IL-10"="IL10", "IL-21"="IL21","IL-2"="IL2", "Interferon gamma"= "Interferon \u03B3", "SDF-1a"="SDF-1\u03B1", "CpG ODN"="CpG ODN", "Resiquimod"="Resiquimod", "sCD40L"="sCD40L", "HS-5 CM"="HS-5 CM", "soluble anti-IgM"="soluble anti-IgM", "BAFF"="BAFF")
gene_labels = c("IGHV.status" = "IGHV status", "del11q" = "del(11q)", "del13q" = "del(13q)", "del17p" = "del(17p)", "trisomy12" = "trisomy 12", "TP53" = "TP53", "SF3B1" = "SF3B1", "ATM" = "ATM")
Fig6A <-
coeff.long.mat.ordered %>%
ggplot(aes(y=Drug, x=gene)) +
geom_tile(aes(fill=coeff),color = "white") +
scale_fill_gradientn(colors=c(rep(palblues[1:4],each=2),
"white",
rep(palreds[5:8], each=2)),
limits=c(-0.8,.8)) +
t1 +
theme(axis.text.x = element_text(angle = 35, hjust = 1, vjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.ticks.x =element_blank(),
panel.background = element_rect(color = "black", fill=NA),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
legend.key.height=unit(0.5, "cm"),
legend.key.width=unit(2, "cm"),
legend.title = element_text(face='bold', hjust = 0, size=fontsize+2),
legend.position = "top",
legend.key = element_blank(),
legend.text = element_text(size=fontsize),
legend.background = element_rect(color = NA),
strip.text.y.left = element_text(size=22, angle = 0, face="bold"),
strip.background = element_blank())+
labs(fill = expression(beta["int"]))+
scale_y_discrete(position = "right")+
scale_x_discrete(labels = gene_labels) +
facet_grid(Stimulus~., scales = "free_y",  space="free_y", switch = "both", labeller =labeller( Stimulus=cyt_labels))
Fig6A
#run lassoPlot function to generate predictor profiles, with no minimum coefficient value
heatMaps <- lassoPlot(dataResult, geneMatrix.complete, betaMatrix, freqCut = 0.9, coefCut = 0.0)
heatMaps <- heatMaps[!is.na(heatMaps)]
Fig6B <- grid.arrange(grobs = heatMaps["Fludarabine + CpG ODN"], ncol = 1)
Fig6B
#set facet labels
tri12.labs <- c("0" = "Non-\ntrisomy 12", "1" = "trisomy 12")
ighv.labs <- c("U" = "IGHV-U", "M" =  "IGHV-M")
#join viability and genetic data tables
df.patMeta <- left_join(df, patMeta, by = "PatientID")
Fig6C <-
df.patMeta %>%
#filter for drug:stimulus combinations of interest, make sure no NAs in genetic data
dplyr::filter(DCK%in%c("DMSO:CpG ODN","Fludarabine:CpG ODN","Fludarabine:No Cytokine"),
!is.na(trisomy12),
!is.na(IGHV.status)) %>%
mutate(DCK=factor(DCK, levels=c("DMSO:CpG ODN","Fludarabine:No Cytokine","Fludarabine:CpG ODN"))) %>%
#plot treatment combination against viability
ggplot(aes(x = DCK,y = Viability,color= DCK))+
geom_hline(yintercept = 0)+
geom_boxplot()+
geom_beeswarm(cex=1.5) +
guides(color="none", shape="none")+
#add p values
stat_compare_means(method = "t.test",
label.y.npc = 0.8,
paired = TRUE,
comparisons = list(c(1,3), c(2,3)),
step.increase=0.2,
size=6) +
xlab("") +
ylab("Log(Viability)") +
#facet by trisomy 12 and IGHV status
facet_grid(vars(trisomy12),
vars(IGHV.status),
labeller = labeller(trisomy12 = tri12.labs, IGHV.status = ighv.labs))+
scale_x_discrete(labels=c("DMSO:CpG ODN"="CpG ODN",
"Fludarabine:No Cytokine"="Fludarabine",
"Fludarabine:CpG ODN"="Fludarabine \n+ CpG ODN "))+
scale_color_manual(values=c(colors[4], colors[5],colors[3])) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
t2 +
theme(strip.background =element_rect(fill=NA),
strip.text = element_text(size=fontsize+4, face="bold"),
strip.text.y = element_text(angle = 0),
axis.text.x = element_text(size=fontsize+4, angle = 35, hjust = 1, vjust = 1))
Fig6C
Fig6D <-
df.patMeta %>%
#filter for drug:stimulus combinations of interest, make sure no NAs in genetic data
dplyr::filter(DCK%in%c("DMSO:IL-4","Ibrutinib:IL-4","Ibrutinib:No Cytokine"),
!is.na(trisomy12),
!is.na(IGHV.status)) %>%
mutate(DCK = factor(DCK, levels=c("DMSO:IL-4",
"Ibrutinib:No Cytokine",
"Ibrutinib:IL-4"))) %>%
#plot treatment combination against viability
ggplot(aes(x = DCK,y = Viability,color= DCK))+
geom_hline(yintercept = 0)+
geom_boxplot()+
geom_beeswarm(cex=1.5) +
guides(color="none", shape="none")+
#add p values
stat_compare_means(method = "t.test",
label.y.npc = 0.8,
paired = TRUE,
comparisons = list(c(1,3), c(2,3)),
step.increase=0.2,
size=6) +
xlab("") +
ylab("Log(Viability)") +
#facet by trisomy 12 and IGHV status
facet_grid(vars(trisomy12),
vars(IGHV.status),
labeller = labeller(trisomy12 = tri12.labs, IGHV.status = ighv.labs))+
scale_x_discrete(labels=c("DMSO:IL-4"="IL4",
"Ibrutinib:No Cytokine"="Ibrutinib",
"Ibrutinib:IL-4"="Ibrutinib \n+ IL4"))+
scale_color_manual(values=c(colors[4], colors[5], colors[3])) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
t2 +
theme(strip.background =element_rect(fill=NA),
strip.text = element_text(size=fontsize+4, face="bold"),
strip.text.y = element_text(angle = 0),
axis.text.x = element_text(size=fontsize+4, angle = 35, hjust = 1, vjust = 1))
Fig6D
Lasso_Plots_Fig6 <- heatMaps
coeff.long.mat_Fig6 <- coeff.long.mat
save(Lasso_Plots_Fig6,
coeff.long.mat_Fig6,
file = "../../data/fig6_data_for_supplement.RData")
#Design
design1<-"
AB
AC
AD
"
#Tag Theme
tp <- theme(plot.tag=element_text(size = 30))
# Plot
Fig6<- (wrap_elements(Fig6A)) + tp +
Fig6B + tp +
Fig6C+ tp +
Fig6D + tp +
plot_annotation(tag_levels = "A", title="Figure 6", theme = theme(title=element_text(size = 20))) +
plot_layout(design=design1, heights = c(0.9,1,1))
Fig6
df.patMeta %>%
#filter for drug:stimulus combinations of interest, make sure no NAs in genetic data
dplyr::filter(DCK%in%c("DMSO:Interferon gamma","Ibrutinib:Interferon gamma","Ibrutinib:No Cytokine"),
!is.na(trisomy12),
!is.na(IGHV.status)) %>%
mutate(DCK = factor(DCK, levels=c("DMSO:Interferon gamma",
"Ibrutinib:No Cytokine",
"Ibrutinib:Interferon gamma"))) %>%
#plot treatment combination against viability
ggplot(aes(x = DCK,y = Viability,color= DCK))+
geom_hline(yintercept = 0)+
geom_boxplot()+
geom_beeswarm(cex=1.5) +
guides(color="none", shape="none")+
#add p values
stat_compare_means(method = "t.test",
label.y.npc = 0.8,
paired = TRUE,
comparisons = list(c(1,3), c(2,3)),
step.increase=0.2,
size=6) +
xlab("") +
ylab("Log(Viability)") +
#facet by trisomy 12 and IGHV status
facet_grid(vars(trisomy12),
vars(IGHV.status),
labeller = labeller(trisomy12 = tri12.labs, IGHV.status = ighv.labs))+
scale_x_discrete(labels=c("DMSO:Interferon gamma"="Interferon gamma",
"Ibrutinib:No Cytokine"="Ibrutinib",
"Ibrutinib:Interferon gamma"="Ibrutinib \n+ Interferon gamma"))+
scale_color_manual(values=c(colors[4], colors[5], colors[3])) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
t2 +
theme(strip.background =element_rect(fill=NA),
strip.text = element_text(size=fontsize+4, face="bold"),
strip.text.y = element_text(angle = 0),
axis.text.x = element_text(size=fontsize+4, angle = 35, hjust = 1, vjust = 1))
coefficients.all %>%
filter(Drug=="Ibrutinib", Cytokine%in%c("IL-4", "Interferon gamma")) %>%
left_join(patMeta, by = "PatientID") %>%
ggplot(aes(x=interaction(trisomy12, IGHV.status), y=beta))+
geom_boxplot()+
geom_beeswarm(aes(color=IGHV.status, shape=trisomy12))+
scale_color_manual(values=c(colors[4], colors[5], colors[3])) +
facet_wrap(.~Cytokine) +
scale_x_discrete(labels=c("0.M"="IGHV-M\n WT",
"0.U"="IGHV-U\n WT",
"1.M"="IGHV-M\n trisomy 12",
"1.U"="IGHV-U\n trisomy 12"))+
t2+
guides(color="none", shape="none")+
xlab("")+
ylab("Interaction factor")
coefficients.all %>%
mutate(Patient_Drug=paste0(PatientID,":", Drug)) %>%
pivot_wider(names_from = Cytokine, values_from = beta) %>%
select(-Drug, - PatientID)%>%
column_to_rownames("Patient_Drug")%>%
rstatix::cor_mat() %>%
pivot_longer(cols = -rowname, names_to = "Cytokine_2", values_to = "Pearson_R") %>%
rename(Cytokine_1=rowname) %>%
ggplot(aes(Cytokine_1, Cytokine_2))+
geom_tile(aes(fill=Pearson_R),color = "grey")+
scale_fill_gradientn(colors=c("#003DA5",  "white",  "#A6093D"), limits=c(-1,1))+
geom_text(aes(label=round(Pearson_R, 2)))+
t1
coefficients.all %>%
filter( Cytokine%in%c("Interferon gamma","IL-4")) %>%
# left_join(patMeta, by = "PatientID") %>%
pivot_wider(names_from = "Cytokine", values_from = "beta") %>%
ggplot(aes(x=`IL-4`, y=`Interferon gamma`))+
geom_point()+
geom_smooth(method="lm", formula='y ~ x')+
facet_wrap(.~Drug, scales = "free")+
stat_cor()
coefficients.all %>%
filter( Cytokine%in%c("Interferon gamma","IL-4"), Drug=="Ibrutinib") %>%
# left_join(patMeta, by = "PatientID") %>%
pivot_wider(names_from = "Cytokine", values_from = "beta") %>%
ggplot(aes(x=`IL-4`, y=`Interferon gamma`))+
geom_point()+
geom_smooth(method="lm", formula='y ~ x')+
facet_wrap(.~Drug, scales = "free")+
stat_cor()+
t2
Sys.info()
sessionInfo()
nrow(geneMatrix.complete)
geneMatrix.complete
#select features from patient meta file
geneMatrix <- dplyr::select(patMeta, -c(gender:treatment, Methylation_Cluster)) %>%
#adjust IGHV levels to 1 and 0
mutate(IGHV.status = ifelse(is.na(IGHV.status), NA,
ifelse(IGHV.status == "M", 1, 0))) %>%
#change factors to characters and then to numeric
mutate_if(is.factor, as.character) %>%
mutate_at(vars(-PatientID), as.numeric) %>%
#convert to matrix format
data.frame() %>%
column_to_rownames("PatientID") %>%
as.matrix()
#Remove genes with higher than 20% missing values
geneMatrix <- geneMatrix[,colSums(is.na(geneMatrix))/nrow(geneMatrix) <= 0.2]
#Filter for patients with complete data
geneMatrix.complete <- geneMatrix[complete.cases(geneMatrix),]
nrow(geneMatrix.complete)
#Combine KRAS, NRAS and BRAF mutations into a single column
##Add Ras_raf column
Ras_Raf <- matrix(NA, nrow = nrow(geneMatrix.complete), ncol = 1)
colnames(Ras_Raf) <- "KRAS,\nNRAS,\nBRAF"
geneMatrix.complete <- cbind(geneMatrix.complete, Ras_Raf)
#Add a 1 where any of KRAS, NRAS or BRAF are mutated
geneMatrix.complete[,"KRAS,\nNRAS,\nBRAF"] <- ifelse(geneMatrix.complete[,"KRAS"]==1,1,
ifelse(geneMatrix.complete[,"BRAF"]==1,1,
ifelse(geneMatrix.complete[,"NRAS"]==1, 1, 0)))
#Remove individual KRAS, NRAS and BRAF columns
geneMatrix.complete <- geneMatrix.complete[, !colnames(geneMatrix.complete) %in%  c("KRAS", "NRAS", "BRAF")]
#select features from patient meta file
geneMatrix <- dplyr::select(patMeta, -c(gender:treatment, Methylation_Cluster)) %>%
#adjust IGHV levels to 1 and 0
mutate(IGHV.status = ifelse(is.na(IGHV.status), NA,
ifelse(IGHV.status == "M", 1, 0))) %>%
#change factors to characters and then to numeric
mutate_if(is.factor, as.character) %>%
mutate_at(vars(-PatientID), as.numeric) %>%
#convert to matrix format
data.frame() %>%
column_to_rownames("PatientID") %>%
as.matrix()
#Remove genes with higher than 20% missing values
geneMatrix <- geneMatrix[,colSums(is.na(geneMatrix))/nrow(geneMatrix) <= 0.2]
geneMatrix.complete
plotTab<-
df.patMeta %>%
#filter for drug:stimulus combinations of interest, make sure no NAs in genetic data
dplyr::filter(DCK%in%c("DMSO:CpG ODN","Fludarabine:CpG ODN","Fludarabine:No Cytokine"),
!is.na(trisomy12),
!is.na(IGHV.status)) %>%
mutate(DCK=factor(DCK, levels=c("DMSO:CpG ODN","Fludarabine:No Cytokine","Fludarabine:CpG ODN")))
Fig6C <-
#plot treatment combination against viability
ggplot(plotTab, aes(x = DCK,y = Viability,color= DCK))+
geom_hline(yintercept = 0)+
geom_boxplot()+
geom_beeswarm(cex=1.5) +
guides(color="none", shape="none")+
#add p values
stat_compare_means(method = "t.test",
label.y.npc = 0.8,
paired = TRUE,
comparisons = list(c(1,3), c(2,3)),
step.increase=0.2,
size=6) +
xlab("") +
ylab("Log(Viability)") +
#facet by trisomy 12 and IGHV status
facet_grid(vars(trisomy12),
vars(IGHV.status),
labeller = labeller(trisomy12 = tri12.labs, IGHV.status = ighv.labs))+
scale_x_discrete(labels=c("DMSO:CpG ODN"="CpG ODN",
"Fludarabine:No Cytokine"="Fludarabine",
"Fludarabine:CpG ODN"="Fludarabine \n+ CpG ODN "))+
scale_color_manual(values=c(colors[4], colors[5],colors[3])) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))+
t2 +
theme(strip.background =element_rect(fill=NA),
strip.text = element_text(size=fontsize+4, face="bold"),
strip.text.y = element_text(angle = 0),
axis.text.x = element_text(size=fontsize+4, angle = 35, hjust = 1, vjust = 1))
plotTab
length(unique(plotTab$PatientID))
